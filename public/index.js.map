{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst filePath = path.join(__dirname, 'input2.txt');\r\nconst lines = fs.readFileSync(filePath, 'utf-8').split('\\n')\r\n\r\ninterface Hash {\r\n  [key: string]: number;\r\n}\r\n\r\nconst myHash: Hash = {\r\n'a' :  1, \"b\" : 2, \"c\" : 3, \"d\" : 4, \"e\" : 5, \"f\" : 6, \"g\" : 7, \"h\" : 8, \"i\" : 9, \"j\" : 10, \"k\" : 11, \"l\" : 12, \"m\" : 13, \"n\" : 14, \"o\" : 15, \"p\" : 16, 'q' : 17, \"r\" : 18, \"s\" : 19, \"t\" : 20, \"u\" : 21, \"v\" : 22, \"w\" :23, \"x\" :24, \"y\" : 25, \"z\" : 26,  \"A\" : 27, \"B\" : 28, \"C\" : 29, \"D\" : 30,  \"E\" : 31, \"F\" : 32, \"G\" : 33, 'H' : 34, \"I\" : 35, \"J\": 36, \"K\" : 37, \"L\" : 38, \"M\" : 39, \"N\" : 40, \"O\" : 41, \"P\" : 42, \"Q\" : 43, \"R\" : 44, \"S\" : 45, \"T\" : 46, \"U\" : 47, \"V\" : 48, \"W\" :49, \"X\" :50, \"Y\" : 51, \"Z\" : 52\r\n}\r\n\r\nlet count = 0\r\n\r\nconst totalSum = lines.map((item, i) => {\r\n  let splitItem = item.split('\\r')\r\n  let stringItem = splitItem[0]\r\n  let arrayOfItem = stringItem.split('')\r\n  let firstHalf = arrayOfItem.slice(0, arrayOfItem.length /2).join('')\r\n  let secondHalf = arrayOfItem.slice(arrayOfItem.length / 2 ).join('')\r\n  let firstArray = firstHalf.split('')\r\n  let secondArray = secondHalf.split('')\r\n  \r\n \r\n  let value = findMatchingIndex(firstArray, secondArray)\r\n\r\n  return myHash[value]\r\n})\r\n\r\nfunction findMatchingIndex(arr1: any, arr2: any)  {\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    for (let j = 0; j < arr2.length; j++) {\r\n      if (arr1[i] === arr2[j]) {\r\n        return arr1[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n//total sum of the common letter in each halve of the runsacks\r\nlet total = totalSum.reduce((acc, curr) => {\r\n  return acc + curr\r\n}, 0 )\r\n\r\n\r\n//threeElveArray pushes into a new array using modulus everytime\r\n// index is divided into 3 perfectly.\r\nconst ThreeElveArray: string[][] = lines.reduce((acc: string[][], curr:string, i: any) => {\r\nconsole.log(i)\r\n  let splitItem = curr.split('\\r')\r\n  let stringItem = splitItem[0]\r\n  //for every 3 elves I must create a new array\r\n  if(i % 3 === 0) {\r\n    acc.push([stringItem])\r\n  \r\n  }  else {\r\n    acc[acc.length -1].push(stringItem)\r\n  }\r\nreturn acc\r\n\r\n}, [])\r\n\r\n//My hash holds all the characters in each string array\r\nconst hashTable: Hash = {};\r\n\r\n const findMatchingElveIndex = (elveArr: string[], elveArr1: string[], elveArr2: string[]) => {\r\n//Each loop checks to see if the current letter in each array exists in \r\n//the hash table, then adds value if doesn't exist.\r\n  for (let i = 0; i < elveArr.length; i++) {\r\n    if (!hashTable[elveArr[i]]) {\r\n    \r\n      hashTable[elveArr[i]] = i;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < elveArr1.length; i++) {\r\n    if (!hashTable[elveArr1[i]]) {\r\n      hashTable[elveArr1[i]] = i;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < elveArr2.length; i++) {\r\n    if (!hashTable[elveArr2[i]]) {\r\n      hashTable[elveArr2[i]] = i;\r\n    }\r\n  }\r\n//Then we loop through the keys and check to see if all keys are matching\r\n//each array in the if statement arrays. and returns key value matches.\r\n  for (const key in hashTable) {\r\n    if (elveArr.includes(key) && elveArr1.includes(key) && elveArr2.includes(key)) {\r\n      return key;\r\n    }\r\n  }\r\n  \r\n}\r\n//Here I'm call the above function on each of the arrays to check each value\r\n//for all of the arrays in each group.\r\n//then  i return the hashValue which contains the alphabet with each value \r\n//tied to the hash myHash[value]\r\nconst ThreeElveMatch = ThreeElveArray.map(elveGroup => {\r\n  let firstElve = elveGroup[0].split('');\r\n  let secondElve = elveGroup[1].split('');\r\n  let thirdElve = elveGroup[2].split('');\r\n\r\n let value: any =  findMatchingElveIndex(firstElve, secondElve, thirdElve)\r\n\r\n\r\n  return myHash[value]\r\n})\r\n\r\n//then finally we accumlate the total of all the matching characters in\r\n//each group.\r\nlet total2 = ThreeElveMatch.reduce((acc, curr) => {\r\n  return acc + curr\r\n}, 0 )\r\n\r\n\r\n\r\n\r\n \r\n\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}